<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.project.mapper.UserMapper">

  <select id="selectByPrimaryKey" resultType="com.example.project.entity.User">
    select * from user_info
    where username = #{username}
  </select>

  <select id="usernameByEmail" resultType="java.lang.String">
    select username from user_info
    where email = #{email}
  </select>

  <insert id="createVcode">
    insert into email_verify
    values (#{email},#{verifycode})
  </insert>

  <select id="checkVcode" resultType="java.lang.Integer">
    select count(*) from email_verify
    where email = #{email} and verifycode = #{verifycode}
  </select>

  <select id="existUser" resultType="java.lang.Integer">
    select count(*) from user_info
    where username = #{username}
  </select>

  <select id="existEmail" resultType="java.lang.Integer">
    select count(*) from user_info
    where email = #{email}
  </select>

  <select id="existVemail" resultType="java.lang.Integer">
    select count(*) from email_verify
    where email = #{email}
  </select>

  <update id="updateVcode">
    update email_verify set verifycode = #{verifycode} where email = #{email}
  </update>

  <insert id="insertUser">
    insert into user_info
    values (#{username},#{password},#{email},NULL)
  </insert>

  <delete id="deleteUser">
    delete from user_info
    where username=#{username}
  </delete>

  <delete id="deleteVcode">
    delete from email_verify
    where email=#{email}
  </delete>

  <update id="updatePassword">
    update user_info
    set password=#{password}
    where username=#{username}
  </update>

  <update id="updatePassword_email">
    update user_info
    set password=#{password}
    where email=#{email}
  </update>

  <select id="selectFollow" resultType="java.lang.String">
    select follow from user_follow
    where username = #{username}
  </select>

  <select id="selectFollower"  resultType="java.lang.String">
    select follower from user_follower
    where username = #{username}
  </select>

  <select id="selectCollection" resultType="java.lang.Integer">
    select post_id from post_collect
    where collect_user = #{username}
  </select>

  <delete id="deleteByPrimaryKey" >
    delete from user_info
    where username = #{username}
  </delete>

  <select id="existFollower" resultType="java.lang.Integer">
    select count(1) from user_follower
    where username = #{username}
      and follower = #{follower}
  </select>


  <insert id="insertFollower">
    insert into user_follower
    values (#{username},#{follower})
  </insert>

  <delete id="deleteFollower">
    delete from user_follower
    where follower = #{follower}
      and username = #{username}
  </delete>

  <select id="getFollower" resultType="java.lang.String">
    select follower from user_follower
    where  username = #{username}
    order by 1 desc
  </select>

  <select id="countFollower" resultType="java.lang.Integer">
    select count(1) from user_follower
    where username = #{username}
  </select>

  <select id="getFollow" resultType="java.lang.String">
    select username from user_follower
    where follower = #{username}
  </select>

  <select id="countFollow" resultType="java.lang.Integer">
    select count(1) from user_follower
    where follower = #{username}
  </select>

  <select id="getUsers" resultType="com.example.project.entity.User">
    select username,email,module_admin from user_info
    where username!="systemadmin"
  </select>

  <insert id="insertChat" parameterType="com.example.project.entity.ChatMessage">
    insert into chat_message(from_user,to_user,content,send_time)
    values (#{chatmessage.from_user},#{chatmessage.to_user},#{chatmessage.content},UTC_TIMESTAMP)
  </insert>

  <select id="getallnewchat" resultType="com.example.project.entity.ChatMessage">
    select * from  chat_message a
    where a.send_time in (select max(send_time) date from chat_message where to_user=#{username} group by from_user)
    and to_user=#{username}
    order by send_time desc
  </select>

  <select id="countunreadchat_all" resultType="java.lang.Integer">
    select count(1) from chat_message
    where to_user=#{username} and unread="1"
    order by send_time desc
  </select>

  <select id="countunreadchat" resultType="java.lang.Integer">
    select count(1) from chat_message
    where to_user=#{username} and unread="1" and from_user=#{from_user}
    order by send_time desc
  </select>

  <select id="getchat" resultType="com.example.project.entity.ChatMessage">
    select message_id,from_user,to_user,content,send_time,unread from chat_message
    where (to_user=#{username} and from_user=#{from_user}) or (to_user=#{from_user} and from_user=#{username})
    order by send_time desc
  </select>

  <update id="setunread">
    update chat_message
    set unread=0
    where to_user=#{username} and from_user=#{from_user}
  </update>

  <update id="setunread1">
    update chat_message
    set unread=1
    where to_user=#{username} and from_user=#{from_user}
  </update>



<!--  <insert id="insert" parameterType="com.example.project.entity.User">-->
<!--    insert into user_info (username, password)-->
<!--    values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR})-->
<!--  </insert>-->

<!--  <insert id="insertSelective" parameterType="com.example.project.entity.User">-->
<!--    insert into user_info-->
<!--    <trim prefix="(" suffix=")" suffixOverrides=",">-->
<!--      <if test="username != null">-->
<!--        username,-->
<!--      </if>-->
<!--      <if test="password != null">-->
<!--        password,-->
<!--      </if>-->
<!--    </trim>-->
<!--    <trim prefix="values (" suffix=")" suffixOverrides=",">-->
<!--      <if test="username != null">-->
<!--        #{username,jdbcType=VARCHAR},-->
<!--      </if>-->
<!--      <if test="password != null">-->
<!--        #{password,jdbcType=VARCHAR},-->
<!--      </if>-->
<!--    </trim>-->
<!--  </insert>-->

</mapper>